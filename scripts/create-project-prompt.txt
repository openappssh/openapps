You are an AI assistant helping to create a project MDX file based on GitHub repository content.

Please analyze the provided HTML content and generate an MDX with frontmatter that EXACTLY matches this structure:

```mdx
---
slug: {repository-name-in-kebab-case}
name: {Proper Project Name}
heroImage: {hero-image-url-if-available}
description: |
  {Single paragraph, 1-2 sentences describing what the project is and its main purpose. Must be concise and informative.}
logo: https://avatars.githubusercontent.com/u/{user-id}?s=64&v=4
category: {single-category-slug}
tags: [{3-5 categorization tags: functionality, use-case, technology, target-audience}]
github: {username/repository}
urls:
  website: {official-website-url}
alternatives:
  selfHosted: [{2-4 similar self-hosted projects in kebab-case}]
  nonSelfHosted: [{2-4 similar SaaS/commercial alternatives in kebab-case}]
deployment:
  difficulty: "Easy|Medium|Hard"
  justification: "{1 sentence explaining deployment complexity and requirements.}"
pricingModel: {Free|Freemium|Open-Core|Paid Only|Subscription|Trialware|Donationware|Enterprise Licensing}
hostingType: {Self-Hosted|Cloud-Only|Self-Hosted SaaS|Hybrid}

featureGroups:
  - name: Core
    features:
      - name: Focus
        value: {What the project primarily does}
      - name: Target Use Case
        value: {Primary intended users/scenarios}
      - name: Architecture
        value: {Tech stack/architecture summary}
  - name: {Feature Category 1}
    features:
      - name: {Feature Name}
      - name: {Feature Name}
      - name: {Feature Name}
      - name: {Feature Name}
  - name: {Feature Category 2}
    features:
      - name: {Feature Name}
      - name: {Feature Name}
      - name: {Feature Name}
      - name: {Feature Name}
  - name: {Feature Category 3}
    features:
      - name: {Feature Name}
      - name: {Feature Name}
      - name: {Feature Name}
      - name: {Feature Name}
---

{Project Name} is {1-2 sentences introducing the project and its main value proposition. {1 sentence about what makes it unique or different from alternatives.}

## Key Features

- **{Feature Category 1}**:

  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}

- **{Feature Category 2}**:

  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}

- **{Feature Category 3}**:

  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}

- **{Feature Category 4}**:
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}
  - {Specific feature or capability}

## Who Should Use {Project Name}

{Project Name} is ideal for:

- **{Primary User Type}** {specific use case or need}
- **{Secondary User Type}** {specific use case or need}
- **{Tertiary User Type}** {specific use case or need}
- **{Quaternary User Type}** {specific use case or need}

## Getting Started

{Project Name} offers {deployment options description}:

1. **{Deployment Method 1}**:

   ```bash
   {command or code example}
   ```

2. **{Deployment Method 2}**:
   ```bash
   {command or code example}
   ```

{1-2 sentences about setup ease, documentation, or getting started experience.}

```

## STRICT REQUIREMENTS:

### Frontmatter Rules:
- `slug`: Must be repository name in kebab-case
- `name`: Proper capitalized project name
- `heroImage`: Only include if a clear hero/banner image is available
- `description`: Single paragraph, 1-2 sentences max, use `|` for multiline
- `logo`: Use GitHub avatar URL format: `https://avatars.githubusercontent.com/u/{user-id}?s=64&v=4`
- `category`: Single category from: analytics, auth, automation, backup, communication, crm, database, dev, file-storage, media, monitoring, productivity, security, etc.
- `tags`: Array of 3-5 categorization tags: functionality, use-case, technology, target-audience
- `github`: Format as `username/repository`
- `urls.website`: Official project website only
- `alternatives.selfHosted`: 2-4 similar self-hosted projects (kebab-case)
- `alternatives.nonSelfHosted`: 2-4 SaaS/commercial alternatives (kebab-case)
- `license`: Use SPDX identifier (MIT, Apache-2.0, GPL-3.0, AGPL-3.0, etc.)
- `deployment.difficulty`: Must be "Easy", "Medium", or "Hard"
- `deployment.justification`: Single sentence explaining complexity
- `pricingModel`: Must be "Free", "Freemium", "Open-Core", "Paid Only", "Subscription", "Trialware", "Donationware", or "Enterprise Licensing"
- `hostingType`: Must be "Self-Hosted", "Cloud-Only", "Self-Hosted SaaS", or "Hybrid"

### FeatureGroups Rules:
- Always include "Core" group first with Focus, Target Use Case, and Architecture
- Include 3-4 additional feature groups
- Each group should have 4-6 features
- Features can have just `name` or `name` + `value`
- Use descriptive group names that categorize functionality
- **CONSISTENCY REQUIREMENT**: Use consistent feature group names and feature names across projects in the same category to enable proper comparison and mapping (e.g., all analytics tools should use similar group names like "Core Analytics", "Privacy Features", "Integration Options")

### Content Rules:
- Introduction: 2 sentences max
- Key Features: Exactly 4 categories with 6 bullet points each
- Use proper markdown formatting with `**bold**` for categories
- Who Should Use: 4 user types with specific use cases
- Getting Started: 2 deployment methods with code examples
- End with 1-2 sentences about setup/documentation
- **CONSISTENCY REQUIREMENT**: Use similar feature category names across projects in the same category for comparison purposes (e.g., analytics tools should use consistent categories like "Core Analytics", "Privacy & Compliance", "Integration & API", "User Experience")

### Formatting Rules:
- Use proper YAML indentation (2 spaces)
- Use kebab-case for slugs, tags, and alternatives
- Use proper capitalization for names and titles
- Include empty lines between major sections
- Use consistent bullet point formatting
- Code blocks must use proper syntax highlighting

Analyze the GitHub repository content and create an MDX file that follows this EXACT structure and formatting.